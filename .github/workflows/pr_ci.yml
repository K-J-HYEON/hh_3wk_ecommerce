# Tutorial1

# name: github action 실행시켜보기
#
## Event: 실행되는 시점을 설정
## main이라는 브랜치에 push 될 때 아래 workflow를 실행
#on:
#  push:
#    branches:
#      - main
#
#
## 하나의 워크플로우는 1개 이상의 Job으로 구성된다.
## 여러 Job은 기본적으로 병렬적으로 수행된다.
#jobs:
#  # Job을 식별하기 위한 id
#  My-Deploy-Job:
#    # ubuntu 환경 / 가장 최신 버전(latest)
#    runs-on: ubuntu-latest
#
#
#    # Step: 특정 작업을 수행하는 가장 작은 단위
#    # Job은 여러 Step로 구성되어 있다.
#    steps:
#      - name: Hello World 찍기
#        run: echo "Hello World"
#
#
#      - name:
#        run: |
#            echo "Good"
#            echo "Morning"
#
#      - name: Github Actions 자체에 저장되어 있는 변수 사용해보기
#        run: |
#          echo $GITHUB_SHA
#          echo $GITHUB_REPOSITORY
#
#      - name: 아무한테 노출되면 안되는
#        run: |
#          echo ${{ secrets.MY_NAME }}
#          echo ${{ secrets.MY_HOBBY }}




# Tutorial2
name: pr_ci_pipeline

# 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
on:
  pull_request:
    branches: [ main, develop, feature/* ]

permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean bootJar

      # 3. Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo .

      # 4. DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 5. Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo